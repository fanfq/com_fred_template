plugins {
    id 'com.android.application'
}
apply plugin: 'walle'

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}
def isLinux() {
    return org.gradle.internal.os.OperatingSystem.current().isLinux()
}
def isMacOs() {
    return org.gradle.internal.os.OperatingSystem.current().isMacOsX()
}

def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+08:00"))
}

def gitHash() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.fred.template"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        println("*****************************************************")
        println("vSTARTSTART")
        println("v"+versionName+"("+versionCode+") "+ gitHash())
        println("vENDEND")
        println("STARTSTART")
        println("appName：${APP_NAME}")
        println("appDesc：${APP_DESC}")
        println("packageName："+applicationId)
        println("versionCode："+versionCode)
        println("versionName："+versionName)
        println("gitHash："+gitHash())
        println("buildTime："+buildTime())
        println("releaseNotes：${APP_RELEASE_NOTES}")
        println("ENDEND")
        println("*****************************************************")
    }

    signingConfigs {
        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                if(isWindows()){
                    storeFile file(RELEASE_STORE_FILE_WINDOWS)
                }else if(isLinux()){
                    storeFile file(RELEASE_STORE_FILE_LINUX)
                }else{
                    //默认路径
                    storeFile file(RELEASE_STORE_FILE)
                }
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true //混淆
            zipAlignEnabled true //Zipalign优化
            shrinkResources true // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String","APP_NAME","\"${APP_NAME}\""
            buildConfigField "String","APP_DESC","\"${APP_DESC}\""
            buildConfigField "String","APP_RELEASE_NOTES","\"${APP_RELEASE_NOTES}\""
            buildConfigField "String","BUILD_TIME","\"${buildTime()}\""
            buildConfigField "String","GIT_HASH","\"${gitHash()}\""
        }

        debug {
            minifyEnabled false //混淆
            zipAlignEnabled true //Zipalign优化
            shrinkResources false // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release

            buildConfigField "String","APP_NAME","\"${APP_NAME}\""
            buildConfigField "String","APP_DESC","\"${APP_DESC}\""
            buildConfigField "String","APP_RELEASE_NOTES","\"${APP_RELEASE_NOTES}\""
            buildConfigField "String","BUILD_TIME","\"${buildTime()}\""
            buildConfigField "String","GIT_HASH","\"${gitHash()}\""
        }


    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    //多渠道打包
    implementation 'com.meituan.android.walle:library:1.1.7'
}


//多渠道打包
walle {
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}(${versionCode})-${buildTime}-${flavorName}.apk'
    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
    channelFile = new File("${project.getProjectDir()}/channel.txt")
    //configFile = new File("${project.getProjectDir()}/config.json")
}
